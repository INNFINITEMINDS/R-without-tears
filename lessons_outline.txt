Potential lesson outline

Lesson 1:   read data, view data, this should have a thing about getting help, 
            doing ?function, stackoverflow, etc etc.
Lesson 2:   select, filter
Lesson 3:   pipe, summarise/group_by
Lesson 4:   mutate 
Lesson 5:   ggplot2 introduction


ggplot2
getting help 
R markdown
git
file paths
writing functions
dealing with NAs (?)

Data shape (Lesson 6? Or after ggplot?) ----------------------------------------
	Data comes in different shapes: examples are flowjo output, plate shaped output etc
		Why does it matter what shape your data is in? Answer: analysis programs can only read it if it is in the format they expect.
		Two main shapes are wide and long. 
			Wide: Usually has individual columns for all the values of a particular variable. They example we'll use is an experiment with data about lots of different cells types. Long data would have one column for each possible value (neutrophil, T, macro)  of the variable we are interested in (cell type). Because you have a special column for each value,you can get all the values that belong together (i.e. in the sample sample) all in one row. There will probably be some kind of annotation column too, like "Sample" and you'll have one row per sample.
			Here is an example: flowjo data
			Long: Long data has a single column per variable. In our example this means that we would have a column for the variable the encompasses all the different cell columns. Let's call it "Cell Type." Our annotation or metadata columns can stay the same, but their contents might look a little different. For example, in the "Sample" column, we will now see the sample name repeated in multiple rows, because we will now have one row holding the information for each particular value of the cell type variable, in each sample. 
			
			Comparison: 
			Wide: Sometimes easier to look at with your eyeballs, but side scrolling sucks and we don't have a way to refer to "cell type" if we want to do some kind of operation on data related to each possible value (T, macro, neutro...) of a certain variable (cell type).
			Long: Not easy easy to look at with eyeballs,  but there are lots of ways, probably better than just looking, to get summary information about the data. For example, to know all the possible values (cell types) you could say levels(Cell.Type), or do a summary by cell type, or filter by Cell.Type == "whatever".
				Foreshadowing for ggplot: It is nice to be able to tell a plot function: vary the color/shape/facetting by "cell type", instead of saying "make T cells blue, Macros red, Neutros pink, etc.
		
		OMG my data is in the wrong shape, curses be upon you flowjo!! What do I do?
			This is usually when it is wide and you want long. In this case you can melt it into the right shape using the melt() function in the reshape2 package
			Do you remember how to install/load a package? Do it.
			Let's look at ?melt  Obrudder, click on the version for data frames
			
		This is a good tutorial: http://seananderson.ca/2013/10/19/reshape.html
		Or maybe this one: http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/
		There are a lot.
		Once you figure it out, write notes for yourself in a way that makes sense for you. Here is what I wrote for myself:
		
		melt:

		id.vars= is non-measured sample information like brush#, method, sample name

		variable.name = the name of the column holding the different things you measured, like cell type. Before melting there is one column for each.

		value.names = the thing you measured, like count

		measure.vars = the values that you measured. Don't really need to use this if you have numbers for the values. use it if the values that you want to melt are strings. 

		the arguments need to be in quotes!!

		EXAMPLE
		melted<-melt(summaryOnly,
					 id.vars=c("Probe.ID","TargetID","ENTREZ_GENE_ID"),
					 variable.name="day.dose",value.name="UpDownFalse")

		EXAMPLE using measure.vars


		original df: "female"

			Female Female.1 Female.2
		1     Mary     Lisa Jennifer
		2    Linda     Mary      Amy
		3 Patricia    Susan  Melissa
		4    Susan    Karen Michelle
		5  Deborah Kimberly Kimberly
		6  Barbara Patricia     Lisa

		want all the names in one column

		meltFemale<-melt(female, measure.vars=c("Female","Female.1","Female.2")

		variable    value
		1   Female     Mary
		2   Female    Linda
		3   Female Patricia
		4   Female    Susan
		5   Female  Deborah
		6   Female  Barbara

		further down "variable" is Female.1 or Female.2
			
	